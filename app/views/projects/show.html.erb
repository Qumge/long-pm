<%= render 'projects/header' %>
<div class="row">
  <div class="box-body">
    <div class="nav-tabs-custom">
      <ul class="nav nav-tabs" data-turbolinks="false">
        <li class="active"><a href="#tab_1" data-toggle="tab">项目操作</a></li>
        <li><a href="#tab_2" data-toggle="tab">项目动态</a></li>
        <li><a href="#tab_3" data-toggle="tab">基本信息</a></li>
      </ul>
      <div class="tab-content">
        <div class="tab-pane active" id="tab_1">
          <%= render 'projects/control' %>
        </div>
        <div class="tab-pane" id="tab_2">
          <%= render 'projects/process' %>
        </div>
        <!-- /.tab-pane -->
        <div class="tab-pane" id="tab_3">
          <%= render 'projects/detail' %>
        </div>
        <!-- /.tab-pane -->
      </div>
      <!-- /.tab-content -->
    </div>
    <!-- nav-tabs-custom -->
  </div>

  <!-- 初始化按钮 start -->
  <div class="col-md-12">
    <div id="container" style="position: absolute; top: 50px;">
      <a class="btn btn-default btn-lg " id="pickfiles" href="#" style="position: relative; z-index: 1;">
        <i class="fa fa-plus"></i>
        <span>选择文件</span>
      </a>
    </div>
  </div>
  <!-- 初始化按钮 end -->

  <!-- 初始化配置 start -->
  <script type="text/javascript">
      var uploader = Qiniu.uploader({
          runtimes: 'html5,html4',          //上传模式,依次退化
          browse_button: 'pickfiles',       //上传选择的点选按钮，**必需**
          uptoken : '<%= @uptoken %>',
          //若未指定uptoken_url,则必须指定 uptoken ,uptoken由其他程序生成
          unique_names: true,
          // 默认 false，key为文件名。若开启该选项，SDK会为每个文件自动生成key（文件名）
          save_key: true,
          // 默认 false。若在服务端生成uptoken的上传策略中指定了 `sava_key`，则开启，SDK在前端将不对key进行任何处理
          domain: '<%= Rails.application.config.qiniu_domain %>',
          //bucket 域名，下载资源时用到，**必需**
          container: 'container',           //上传区域DOM ID，默认是browser_button的父元素，
          max_file_size: '10mb',           //最大文件体积限制
          // flash_swf_url: 'js/plupload/Moxie.swf',  //引入flash,相对路径
          max_retries: 3,                   //上传失败最大重试次数
          dragdrop: true,                   //开启可拖曳上传
          drop_element: 'container',        //拖曳上传区域元素的ID，拖曳文件或文件夹后可触发上传
          chunk_size: '4mb',                //分块上传时，每片的体积
          auto_start: true,                 //选择文件后自动上传，若关闭需要自己绑定事件触发上传
          init: {
              'FilesAdded': function(up, files) {
                  plupload.each(files, function(file) {
                      // 文件添加进队列后,处理相关的事情
                  });
              },
              'BeforeUpload': function(up, file) {
                  // 加载loading
                  // 每个文件上传前,处理相关的事情
              },
              'UploadProgress': function(up, file) {
                  // 每个文件上传时,处理相关的事情
              },
              'FileUploaded': function(up, file, info) {
                  // 每个文件上传成功后,处理相关的事情
                  // 其中 info 是文件上传成功后，服务端返回的json，形式如
                  // {
                  //    "hash": "Fh8xVqod2MQ1mocfI4S4KpRL6D98",
                  //    "key": "gogopher.jpg"
                  //  }
                  // 参考http://developer.qiniu.com/docs/v6/api/overview/up/response/simple-response.html
                  var domain = up.getOption('domain');
                  console.log(info);
                  var res = $.parseJSON(info.response);
                  console.log(res);
                  console.log(res.key);
                  // var res = parseJSON(info);
                  var sourceLink = domain + res.key; //
                  // 提交到服务器
                  // console.log(info);
                  console.log(sourceLink);
              },
              'Error': function(up, err, errTip) {
                  //上传出错时,处理相关的事情
                  console.log(err)
              },
              'UploadComplete': function() {
                  //队列文件处理完毕后,处理相关的事情
                  console.log('complete')
              },
              'Key': function(up, file) {
                  // 若想在前端对每个文件的key进行个性化处理，可以配置该函数
                  // 该配置必须要在 unique_names: false , save_key: false 时才生效
                  var key = "";
                  // do something with key here
                  return key
              }
          }
      });
  </script>


</div>