<div id="form">
  <div class="modal-header" style="padding:5px; padding-left: 15px;">
    <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
    <h4 class="modal-title" id="file-modal-label"></h4>
  </div>
  <%= simple_form_for(@competitor, html: {class: 'form-horizontal group_form', onkeydown: "if(event.keyCode==13)return false;"}, wrapper: :horizontal_form) do |f| %>
    <div class="modal-body" >
      <div class="form-group row string optional competitor_attachment">
        <label class="col-sm-3 col-form-label string optional" for="competitor_attachment">竞品信息</label>
        <div class="col-sm-9">
          <a class="btn btn-xs bg-blue" id="competitor_attachment" href="#" >
            <i class="fa fa-plus"></i>
            <span>选择文件</span>
          </a>
          <span id="filename"><%= @competitor.attachment&.file_name %></span>
        </div>
      </div>

    </div>
  <% end %>

  <div class="modal-footer">
    <%= button_tag '保存', class: 'btn btn-primary commit', data: { disable_with: '保存中' } %>
    <button type="button" class="btn btn-default" data-dismiss="modal">返回</button>
  </div>
</div>

<script type="text/javascript">
    function set_option(name){
        return {
            runtimes: 'html5,html4',          //上传模式,依次退化
            browse_button: name,       //上传选择的点选按钮，**必需**
            uptoken : '<%= @uptoken %>',
            //若未指定uptoken_url,则必须指定 uptoken ,uptoken由其他程序生成
            unique_names: true,
            // 默认 false，key为文件名。若开启该选项，SDK会为每个文件自动生成key（文件名）
            save_key: true,
            // 默认 false。若在服务端生成uptoken的上传策略中指定了 `sava_key`，则开启，SDK在前端将不对key进行任何处理
            domain: '<%= Rails.application.config.qiniu_domain %>',
            //bucket 域名，下载资源时用到，**必需**
            // container: 'container',           //上传区域DOM ID，默认是browser_button的父元素，
            max_file_size: '50mb',           //最大文件体积限制
            // flash_swf_url: 'js/plupload/Moxie.swf',  //引入flash,相对路径
            max_retries: 3,                   //上传失败最大重试次数
            // dragdrop: true,                   //开启可拖曳上传
            // drop_element: 'container',        //拖曳上传区域元素的ID，拖曳文件或文件夹后可触发上传
            chunk_size: '4mb',                //分块上传时，每片的体积
            auto_start: false,                 //选择文件后自动上传，若关闭需要自己绑定事件触发上传
            filters: [
                {title: "files", extensions: "xls,xslx,doc,docx,pdf,png,jpg,jpeg,gif,bmp"}
            ],
            init: {
                'FilesAdded': function (up, files) {
                    plupload.each(files, function (file) {
                        // 文件添加进队列后,处理相关的事情
                        $('#filename').text(file.name);
                    });
                },
                'BeforeUpload': function (up, file) {
                    showSpinner();
                    // 加载loading
                    // 每个文件上传前,处理相关的事情
                },
                'UploadProgress': function (up, file) {
                    // 每个文件上传时,处理相关的事情
                },
                'FileUploaded': function (up, file, info) {
                    // 每个文件上传成功后,处理相关的事情
                    // 其中 info 是文件上传成功后，服务端返回的json，形式如
                    // {
                    //    "hash": "Fh8xVqod2MQ1mocfI4S4KpRL6D98",
                    //    "key": "gogopher.jpg"
                    //  }
                    // 参考http://developer.qiniu.com/docs/v6/api/overview/up/response/simple-response.html
                    var domain = up.getOption('domain');
                    console.log(info);
                    var res = $.parseJSON(info.response);
                    // var res = parseJSON(info);
                    var sourceLink = domain + res.key; //
                    // 提交到服务器
                    // console.log(info);
                    $.ajax({
                        type: '<%= @competitor.id.present? ? 'PATCH' : 'POST' %>',
                        url: '<%= @competitor.id.present? ? competitor_path(@competitor) : competitors_path  %>',
                        data: {path: res.key, file_name: file.name, name: name},
                        dataType: 'script',
                        success: function (data) {

                        }
                    })
                },
                'Error': function (up, err, errTip) {
                    //上传出错时,处理相关的事情
                    console.log(err);
                    alert(err.message);
                },
                'UploadComplete': function () {
                    //队列文件处理完毕后,处理相关的事情
                    console.log('complete')
                },
                'Key': function (up, file) {
                    // 若想在前端对每个文件的key进行个性化处理，可以配置该函数
                    // 该配置必须要在 unique_names: false , save_key: false 时才生效
                    var key = "";
                    // do something with key here
                    return key
                }
            }
        }
    }
    $(function(){
        var qiniu = new QiniuJsSDK();
        var option = set_option('competitor_attachment');
        var uploader = qiniu.uploader(option);

        $('.commit').click(function(){
            uploader.start();
        });
        setTimeout(function(){ uploader.refresh(); }, 1000);
    });

</script>